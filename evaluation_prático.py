# -*- coding: utf-8 -*-
"""Evaluation Prático

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Nk-svr94TqdvrZ8TP739QpJL9IjV11j2
"""

from google.colab import files
upload = files.upload()

import pandas as pd
import numpy as np

df = pd.read_csv('DataPrepFinal.csv')

df.head()

df = df.drop(columns = ['Unnamed: 0', 'name', 'category', 'goal', 'pledged', 'usd pledged'])

df.head()

df['usd_goal_real'] = df['usd_goal_real'].str.strip('USD')

df.head()

# RegEx

df['launched'] = df['launched'].str.replace(' \d\d:\d\d','', regex=True)

df.head()

df['usd_goal_real'] = df['usd_goal_real'].astype('int64')

df['launched'] = pd.to_datetime(df['launched'], format='%d/%m/%y')
df['deadline'] = pd.to_datetime(df['deadline'], format='%d/%m/%y')

df.dtypes

# Criação variável tempo ao vivo

df['time_range'] = (df['deadline'] - df['launched']).dt.days

df.head()

dfc = pd.read_csv('campaign.csv')

dfc.head()

df.head()

dfc['Text Description'].unique()

dfc = dfc.drop(['Text Description'], axis=1)

dfc.head()

# Fazendo merge

df = df.merge(dfc, how='right', on=['ID'])

df.head()

dfi = pd.read_csv('invested.csv')

dfi.head()

dfi = pd.get_dummies(dfi, columns = ['backedLocation'], dtype=int)

dfi.head()

dfi.sort_values(by=['ID'])

dfi = dfi.groupby(by=['ID']).agg({'age': 'mean', 'backedLocation_BR': 'sum', 'backedLocation_GBK': 'sum', 'backedLocation_US': 'sum'})

dfi.head()

df = df.merge(dfi, how='right', on=['ID'])

df.head()

df = pd.get_dummies(df, columns = ['main_category', 'currency', 'country'])

df.head()

df['state'] = df['state'].apply(lambda x : 1 if x=='successful' else 0)

df['state'].unique()

"""# Modeling

"""

y = df['state']
x = df.drop(columns = ['state', 'ID', 'launched', 'deadline'])

x.head()

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2, random_state=42)

classifier = DecisionTreeClassifier(random_state=0)

modeloClassifier = classifier.fit(xtrain, ytrain)

modeloClassifier.score(xtest, ytest)

"""# Observação

Identificamos um problema de negócio.

Temos variáveis que não vão estar disponíveis para as previsões (usd_pledged_real).

A acurácia alta do modelo tão simples levanta suspeitas por si só.

Enfim, essa análise não faz sentido. Temos que fazer uma iteração no processo, talvez voltar para Business understanding.
"""

# Refazendo o modelo sem a variável indisponível
y = df['state']
x = df.drop(columns = ['state', 'ID', 'launched', 'deadline', 'usd_pledged_real'])

xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2, random_state=42)

classifier = DecisionTreeClassifier(random_state=0)

modeloClassifier = classifier.fit(xtrain, ytrain)

modeloClassifier.score(xtest, ytest)

